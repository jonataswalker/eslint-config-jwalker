import { createTypeScriptImportResolver } from 'eslint-import-resolver-typescript'
import pluginESx from 'eslint-plugin-es-x'
import globals from 'globals'

/** @type {import("eslint").Linter.Config[]} */
export default [
    pluginESx.configs['flat/no-new-in-esnext'],
    {
        rules: {
            'no-restricted-syntax': [
                'error',
                // {
                //     selector: 'SequenceExpression',
                //     message: 'The comma operator is confusing and a common mistake. Donâ€™t use it!',
                // },
                {
                    message:
                        'for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.',
                    selector: 'ForInStatement',
                },
                {
                    message:
                        'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.',
                    selector: 'LabeledStatement',
                },
                {
                    message:
                        '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.',
                    selector: 'WithStatement',
                },
            ],
            'padding-line-between-statements': [
                'error',
                { prev: ['const', 'let', 'var'], blankLine: 'always', next: '*' },
                { prev: ['const', 'let', 'var'], next: ['const', 'let', 'var'], blankLine: 'any' },
                { prev: ['for', 'do', 'while'], blankLine: 'always', next: '*' },
                { blankLine: 'always', next: 'return', prev: '*' },
                { blankLine: 'always', prev: 'directive', next: '*' },
                { blankLine: 'always', next: 'for', prev: '*' },
                { blankLine: 'always', prev: 'import', next: '*' },
                { blankLine: 'any', prev: 'import', next: 'import' },
                { blankLine: 'always', prev: 'if', next: '*' },
                { blankLine: 'always', prev: 'function', next: '*' },
                { blankLine: 'always', next: 'function', prev: '*' },
                { blankLine: 'always', next: 'export', prev: '*' },
            ],
            'no-restricted-properties': [
                'error',
                { message: 'Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead.', property: '__proto__' },
                { message: 'Use `Object.defineProperty` instead.', property: '__defineGetter__' },
                { message: 'Use `Object.defineProperty` instead.', property: '__defineSetter__' },
                { message: 'Use `Object.getOwnPropertyDescriptor` instead.', property: '__lookupGetter__' },
                { message: 'Use `Object.getOwnPropertyDescriptor` instead.', property: '__lookupSetter__' },
            ],
            'no-useless-rename': [
                'warn',
                {
                    ignoreDestructuring: false,
                    ignoreExport: false,
                    ignoreImport: false,
                },
            ],
            'no-use-before-define': [
                'error',
                {
                    functions: false,
                    variables: true,
                    classes: true,
                },
            ],
            'no-restricted-globals': [
                'error',
                { message: 'Use `globalThis` instead.', name: 'global' },
                { message: 'Use `globalThis` instead.', name: 'self' },
            ],
            'object-shorthand': [
                'error',
                'always',
                {
                    ignoreConstructors: false,
                    avoidQuotes: true,
                },
            ],
            'no-unused-vars': [
                'error',
                {
                    destructuredArrayIgnorePattern: '^_',
                    caughtErrors: 'all',
                },
            ],
            'prefer-arrow-callback': [
                'error',
                {
                    allowNamedFunctions: false,
                    allowUnboundThis: true,
                },
            ],
            'prefer-const': [
                'error',
                {
                    ignoreReadBeforeAssign: true,
                    destructuring: 'all',
                },
            ],
            'no-shadow': [
                'error',
                { builtinGlobals: false, hoist: 'functions' },
            ],
            // unicorn
            'unicorn/filename-case': ['error', { cases: { pascalCase: true, kebabCase: true, camelCase: true } }],
            'no-unused-expressions': ['error', { allowShortCircuit: true, allowTernary: true }],
            // stylistic
            '@stylistic/object-curly-newline': ['error', { consistent: true, multiline: true }],
            'use-isnan': ['error', { enforceForSwitchCase: true, enforceForIndexOf: true }],
            'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
            'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
            'prefer-destructuring': ['error', { object: true, array: false }],
            'no-unneeded-ternary': ['error', { defaultAssignment: false }],
            'new-cap': ['error', { properties: false, capIsNew: false }],
            'valid-typeof': ['error', { requireStringLiterals: true }],
            'line-comment-position': ['error', { position: 'above' }],
            'object-curly-newline': ['error', { consistent: true }],
            'no-console': ['error', { allow: ['warn', 'error'] }],

            'no-redeclare': ['error', { builtinGlobals: false }],
            'dot-notation': ['error', { allowKeywords: true }],
            'max-statements-per-line': ['error', { max: 1 }],
            'no-param-reassign': ['error', { props: false }],
            'no-empty': ['error', { allowEmptyCatch: true }],
            'one-var': ['error', { initialized: 'never' }],
            'no-self-assign': ['error', { props: true }],
            'object-curly-spacing': ['error', 'always'],
            'prefer-exponentiation-operator': 'error',
            'no-misleading-character-class': 'error',
            'no-unmodified-loop-condition': 'error',
            'prefer-promise-reject-errors': 'error',
            'no-template-curly-in-string': 'error',
            'no-promise-executor-return': 'error',
            'no-cond-assign': ['error', 'always'],
            'no-shadow-restricted-names': 'error',
            'max-nested-callbacks': ['error', 4],
            'no-async-promise-executor': 'error',
            'no-empty-character-class': 'error',
            'no-useless-backreference': 'error',

            'no-irregular-whitespace': 'error',

            'no-unexpected-multiline': 'error',

            'no-useless-computed-key': 'error',
            'grouped-accessor-pairs': 'error',
            'require-atomic-updates': 'error',
            'no-useless-constructor': 'error',
            'unicode-bom': ['error', 'never'],
            'no-constructor-return': 'error',
            'no-constant-condition': 'error',
            'array-callback-return': 'error',
            'no-dupe-class-members': 'error',
            'no-extra-boolean-cast': 'error',
            'no-prototype-builtins': 'error',
            'max-classes-per-file': 'error',
            'no-negated-condition': 'error',
            'no-duplicate-imports': 'error',
            'max-statements': ['error', 25],
            'no-implicit-coercion': 'error',
            'no-array-constructor': 'error',
            'no-case-declarations': 'error',
            'no-loss-of-precision': 'error',
            'no-this-before-super': 'error',
            'no-implicit-globals': 'error',
            'no-unreachable-loop': 'error',
            'no-compare-neg-zero': 'error',
            'no-inline-comments': 'error',
            'no-warning-comments': 'warn',
            'no-unsafe-negation': 'error',
            'prefer-rest-params': 'error',
            'symbol-description': 'error',
            'no-empty-function': 'error',
            'constructor-super': 'error',
            'default-case-last': 'error',
            'eqeqeq': ['error', 'smart'],
            'no-duplicate-case': 'error',
            'no-invalid-regexp': 'error',
            'no-unsafe-finally': 'error',
            'no-useless-return': 'error',
            'no-setter-return': 'error',
            'block-scoped-var': 'error',
            'no-control-regex': 'error',
            'no-empty-pattern': 'error',
            'no-extend-native': 'error',
            'no-global-assign': 'error',
            'no-import-assign': 'error',
            'no-sparse-arrays': 'error',
            'no-throw-literal': 'error',
            'no-useless-catch': 'error',
            'max-params': ['error', 3],
            'no-useless-call': 'error',
            'no-class-assign': 'error',
            'no-const-assign': 'error',
            'no-implied-eval': 'error',
            'no-new-wrappers': 'error',
            'no-octal-escape': 'error',
            'no-regex-spaces': 'error',
            'no-self-compare': 'error',
            'prefer-template': 'error',
            'yoda': ['error', 'never'],
            'max-depth': ['error', 4],
            'accessor-pairs': 'error',
            'no-fallthrough': 'error',
            'no-func-assign': 'error',
            'no-lone-blocks': 'error',
            'no-unreachable': 'error',
            'require-await': 'error',
            'no-delete-var': 'error',
            'no-extra-bind': 'error',
            'no-new-symbol': 'error',
            'no-undef-init': 'error',
            'prefer-spread': 'error',
            'no-undefined': 'error',
            'no-div-regex': 'error',
            'no-dupe-args': 'error',
            'no-dupe-keys': 'error',
            'no-ex-assign': 'error',
            'no-multi-str': 'error',
            'no-obj-calls': 'error',
            'no-sequences': 'error',
            'no-debugger': 'error',
            'no-iterator': 'error',
            'no-new-func': 'error',
            'vars-on-top': 'error',
            'no-eq-null': 'error',
            'complexity': [1, 20],
            'sort-vars': 'error',
            // best practices ?
            'no-labels': 'error',
            'no-caller': 'error',
            'no-alert': 'error',
            'no-octal': 'error',

            'no-proto': 'error',
            'no-undef': 'error',
            'no-eval': 'error',
            'no-with': 'error',
            'no-new': 'error',
            'no-var': 'error',

        },
        languageOptions: {
            globals: {
                ...globals.browser,
                ...globals.es2021,
                ...globals.node,
                navigator: 'readonly',
                document: 'readonly',
                window: 'readonly',
            },
            parserOptions: {
                ecmaFeatures: {
                    globalReturn: false,
                    impliedStrict: true,
                },
                ecmaVersion: 'latest',
                sourceType: 'module',
            },
            ecmaVersion: 'latest',
            sourceType: 'module',
        },
        settings: {
            'import-x/resolver-next': [
                createTypeScriptImportResolver(),
            ],
        },
        linterOptions: { reportUnusedDisableDirectives: true },
        name: 'jwalker:common',
    },
]
