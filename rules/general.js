const cjsExport = 'cjs-export';
const cjsImport = 'cjs-import';

module.exports = {
    'new-cap': 'error',
    'sort-vars': 'error',
    'prefer-const': 'error',
    'no-undefined': 'error',
    'no-inline-comments': 'error',
    'max-classes-per-file': 'error',
    'no-negated-condition': 'error',
    'no-duplicate-imports': 'error',
    'prefer-exponentiation-operator': 'error',
    'line-comment-position': ['error', { position: 'above' }],
    'max-depth': ['error', 4],
    'max-len': ['error', { code: 120, ignoreUrls: true }],
    'max-nested-callbacks': ['error', 4],
    'max-params': ['error', 3],
    'max-statements': ['error', 25],
    'max-statements-per-line': ['error', { max: 1 }],
    'object-curly-newline': ['error', { consistent: true }],
    'object-curly-spacing': ['error', 'always'],
    'padding-line-between-statements': [
        'error',
        { blankLine: 'always', prev: '*', next: 'return' },
        { blankLine: 'always', prev: ['const', 'let', 'var'], next: '*' },
        { blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var'] },
        { blankLine: 'always', prev: 'directive', next: '*' },
        { blankLine: 'always', prev: ['for', 'do', 'while'], next: '*' },
        { blankLine: 'always', prev: '*', next: 'for' },
        { blankLine: 'always', prev: 'import', next: '*' },
        { blankLine: 'any', prev: 'import', next: 'import' },
        { blankLine: 'always', prev: 'if', next: '*' },
        { blankLine: 'always', prev: 'function', next: '*' },
        { blankLine: 'always', prev: '*', next: 'function' },
        { blankLine: 'always', prev: '*', next: 'export' },
        { blankLine: 'always', prev: '*', next: cjsExport },
        { blankLine: 'any', prev: cjsExport, next: cjsExport },
        { blankLine: 'any', prev: cjsImport, next: '*' },
        { blankLine: 'any', prev: cjsImport, next: cjsImport },
    ],
    'no-restricted-syntax': [
        'error',
        {
            selector: 'SequenceExpression',
            message: 'The comma operator is confusing and a common mistake. Donâ€™t use it!',
        },
    ],
    'func-style': ['error', 'declaration', { allowArrowFunctions: true }],
    'no-unused-expressions': ['error', { allowShortCircuit: true, allowTernary: true }],
    'no-param-reassign': [
        'error',
        {
            props: true,
            ignorePropertyModificationsFor: ['state'],
        },
    ],
};
